import React from 'react'
import '@testing-library/jest-dom/extend-expect'
import { render, fireEvent } from '@testing-library/react'
import { prettyDOM } from '@testing-library/dom'
import Blog from './Blog'

describe('When rendering blogs', () => {
  test('title and author are rendered', () => {
    const blog = {
      title: 'Test Blog 1',
      author: 'tester',
      url: 'tb1.com',
      likes: 5,
      user: {
        username: 'root'
      },
    }

    const component = render(
      <Blog blog={blog} />
    )
    // Print HTML generated by component to console
    component.debug()

    // method 1
    const element = component.getByText(
      'Test Blog 1'
    )
    expect(element).toBeDefined()
    // method 2
    expect(component.container).toHaveTextContent(
      'tester'
    )
  })

  test('url and likes are not rendered by default', () => {
    const blog = {
      title: 'Test Blog 1',
      author: 'tester',
      url: 'tb1.com',
      likes: 5,
      user: {
        username: 'root'
      },
    }

    const component = render(
      <Blog blog={blog} />
    )
    // method 3
    const div = component.container.querySelector('.blog')
    // print the div element inside the component to the console
    console.log(prettyDOM(div))
    expect(div).not.toHaveTextContent(
      'tb1.com'
    )
    expect(div).not.toHaveTextContent(
      'Likes'
    )
  })
})

test('clicking the view button shows url and likes', () => {
  const user = {
    username: 'root'
  }

  const blog = {
    title: 'Test Blog 1',
    author: 'tester',
    url: 'tb1.com',
    likes: 5,
    user: {
      username: 'root'
    },
  }

  const component = render(
    <Blog blog={blog} user={user} />
  )

  const button = component.getByText('view')
  fireEvent.click(button)

  expect(component.container).toHaveTextContent('tb1.com')
  expect(component.container).toHaveTextContent(blog.likes)
})

test('if like button is clicked twice, event handler is called twice', () => {
  const user = {
    username: 'root'
  }

  const blog = {
    title: 'Test Blog 1',
    author: 'tester',
    url: 'tb1.com',
    likes: 5,
    user: {
      username: 'root'
    },
  }

  const mockHandler = jest.fn()

  const component = render(
    <Blog blog={blog} user={user} handleLike={mockHandler} />
  )

  const button = component.getByText('view')
  fireEvent.click(button)
  const likeButton = component.getByText('like')
  fireEvent.click(likeButton)
  fireEvent.click(likeButton)

  expect(mockHandler.mock.calls).toHaveLength(2)
})